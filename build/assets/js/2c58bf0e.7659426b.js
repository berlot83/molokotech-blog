"use strict";(self.webpackChunkmolokotech_ui=self.webpackChunkmolokotech_ui||[]).push([[7108],{4635:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(4848),i=n(8453);const o={slug:"autoboxing-unboxing",title:"Autoboxing and Unboxing",authors:["axel"],tags:["Molokotech"]},s=void 0,a={permalink:"/blog/autoboxing-unboxing",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-07-28-autoboxing-unboxing/2024-07-28-autoboxing-unboxing.md",source:"@site/blog/2024-07-28-autoboxing-unboxing/2024-07-28-autoboxing-unboxing.md",title:"Autoboxing and Unboxing",description:"banner",date:"2024-07-28T00:00:00.000Z",tags:[{inline:!0,label:"Molokotech",permalink:"/blog/tags/molokotech"}],readingTime:2.13,hasTruncateMarker:!1,authors:[{name:"Axel Berlot",title:"Java developer @ Opendev Pro",url:"http://web.molokotech.com/?lang=en",imageURL:"https://avatars.githubusercontent.com/u/22393878?s=96&v=4",key:"axel"}],frontMatter:{slug:"autoboxing-unboxing",title:"Autoboxing and Unboxing",authors:["axel"],tags:["Molokotech"]},unlisted:!1,nextItem:{title:"Access modifiers",permalink:"/blog/access-modifiers"}},c={authorsImageUrls:[void 0]},l=[];function d(e){const t={code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"banner",src:n(4887).A+"",width:"1400",height:"350"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Autoboxing"})," is the conversion from a ",(0,r.jsx)(t.strong,{children:"primitive"})," value to a ",(0,r.jsx)(t.strong,{children:"Wrapper"})," Classes.\nIt is a background operation outside from de programmer control, that transform primitive types creating objects without explicity creating in the code."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"The simplest way"}),":",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.code,{children:"Integer i = 1;"})]}),"\n",(0,r.jsx)(t.p,{children:"From behind the scenes compiler run new Integer(1) although the IDE says it's deprecated when you type it, the intention is to write cleaner code."}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"It runs when"}),":",(0,r.jsx)("br",{})]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Passed as a parameter to a method that expects a value of the corresponding object wrapper type."}),"\n",(0,r.jsx)(t.li,{children:"Assigned to a variable of the corresponding object wrapper type."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"package com.molokotech.models;\n\npublic class Autoboxing {\n\t\n\t// Assigned to a variable\n\tvoid number() {\n\t\tint number = 100;\n\t\tInteger num = number;\t// The compiler converts from int to new Integer\n\t}\n\n\t// Passed as a parameter\n\tvoid iterate() {\n\t\tList<Integer> li = new ArrayList<>();\n\t\tfor (int i = 1; i < 50; i)\n\t\t    li.add(i);\t// The compiler converts from int to new Integer\n\t}\n\n\t// Simplest examples\n\tvoid autoboxing() {\n\t\tCharacter c = 'c';\t// char to new Character\n\t\tInteger i = 1;\t\t// int to new Integer\n\t}\n\n\t/* remainder (%) and unary plus (+=) operators does'nt works with:\n\t\tInteger\n\t\tByte\n\t\tShort\n\tOnly primitive types are allowed for this operators so from behind the scenes always invokes i.intValue() */\n\tpublic int sum(List<Byte> li) {\n\t\tint sum = 0;\n\t\tfor (Byte i : li)\n\t\t\tif (i % 2 == 0)\n\t\t\t\tsum += i;\n\t\t\treturn sum;\n\t}\n\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"autoboxing",src:n(6792).A+"",width:"710",height:"288"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Unboxing"})," is the conversion from an ",(0,r.jsx)(t.strong,{children:"Object"})," to a ",(0,r.jsx)(t.strong,{children:"primitive"})," value."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"The simplest way"}),":",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.code,{children:"Integer number = 100; int num = number;"})]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Passed as a parameter to a method that expects a value of the corresponding primitive type."}),"\n",(0,r.jsx)(t.li,{children:"Assigned to a variable of the corresponding primitive type."}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"package com.molokotech.models;\n\npublic class Unboxing {\n\t\n\t// Assigned to a variable\n\tvoid number() {\n\t\tInteger number = 100;\n\t\tint num = number; \t// The compiler convertes from Integer to int\n\t}\n\n\t// Passed as a parameter\n\tvoid iterate() {\n\t\tint[] li = new int[50];\n\t\tfor (Integer i = 1; i < 50; i += 2)\n\t\t\tli[i] = i;\n\t}\n\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"unboxing",src:n(6404).A+"",width:"701",height:"249"})}),"\n",(0,r.jsxs)(t.p,{children:["Java compiler run the background operation with for ",(0,r.jsx)(t.strong,{children:"autoboxing"})," and ",(0,r.jsx)(t.strong,{children:"unboxing"})," on the corresponding wrapper clases:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Primitive type"}),(0,r.jsx)(t.th,{children:"Wrapper class"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"boolean"}),(0,r.jsx)(t.td,{children:"Boolean"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"byte"}),(0,r.jsx)(t.td,{children:"Byte"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"char"}),(0,r.jsx)(t.td,{children:"Character"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"float"}),(0,r.jsx)(t.td,{children:"Float"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"int"}),(0,r.jsx)(t.td,{children:"Integer"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"long"}),(0,r.jsx)(t.td,{children:"Long"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"short"}),(0,r.jsx)(t.td,{children:"Short"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"double"}),(0,r.jsx)(t.td,{children:"Double"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},6792:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/autoboxing-4a1fea2363225ba8ed212b59a9698590.png"},6404:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/unboxing-2f3b46b6b35ebb41429434e4ccfb3d6b.png"},4887:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/banner-java-d9daf6988b346c0809bf29ea77bca5ae.jpg"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);